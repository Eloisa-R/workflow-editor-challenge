{"ast":null,"code":"var _jsxFileName = \"/home/grelo/Documents/workflow-editor-challenge/client/src/components/Workflow.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Workflow.css';\nimport Flowchart from './Flowchart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst workflowId = '61fea900ffeccf261074b235';\n\nfunction Workflow() {\n  _s();\n\n  const [workflow, setWorkflow] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    async function getWorkflow() {\n      try {\n        const {\n          data\n        } = await axios.get(`${process.env.REACT_APP_SERVER_BASE_URL}/workflow/${workflowId}`);\n        setWorkflow(data);\n      } catch {\n        setError('Could not fetch the workflow data');\n      }\n    }\n\n    getWorkflow();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section__title\",\n      children: \"Pippete Calibration Workflow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Flowchart, {\n      workflowData: workflow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Workflow, \"TxZPE2pkMFBq1mCgz8+O0IDmQPA=\");\n\n_c = Workflow;\nexport default Workflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workflow\");","map":{"version":3,"sources":["/home/grelo/Documents/workflow-editor-challenge/client/src/components/Workflow.js"],"names":["useState","useEffect","axios","Flowchart","workflowId","Workflow","workflow","setWorkflow","error","setError","getWorkflow","data","get","process","env","REACT_APP_SERVER_BASE_URL"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,UAAU,GAAG,0BAAnB;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,WAAf,GAA6B;AACzB,UAAI;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,yBAA0B,aAAYX,UAAW,EAA1E,CAAvB;AACAG,QAAAA,WAAW,CAACI,IAAD,CAAX;AACH,OAHD,CAGE,MAAM;AACJF,QAAAA,QAAQ,CAAC,mCAAD,CAAR;AACH;AACJ;;AACDC,IAAAA,WAAW;AACd,GAVQ,EAUN,EAVM,CAAT;AAWA,sBACI;AAAS,IAAA,SAAS,EAAC,SAAnB;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKF,KAAK,gBAAE;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAAF,gBAAsB,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEF;AAAzB;AAAA;AAAA;AAAA;AAAA,YAFhC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GArBQD,Q;;KAAAA,Q;AAuBT,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Workflow.css'\nimport Flowchart from './Flowchart';\n\nconst workflowId = '61fea900ffeccf261074b235'\n\nfunction Workflow() {\n    const [workflow, setWorkflow] = useState([]);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        async function getWorkflow() {\n            try {\n                const { data } = await axios.get(`${process.env.REACT_APP_SERVER_BASE_URL}/workflow/${workflowId}`)\n                setWorkflow(data);\n            } catch {\n                setError('Could not fetch the workflow data')\n            }\n        }\n        getWorkflow()\n    }, [])\n    return (\n        <section className=\"section\">\n            <h2 className=\"section__title\">Pippete Calibration Workflow</h2>\n            {error? <div>{error}</div>: <Flowchart workflowData={workflow}/>}\n        </section>\n    )\n}\n\nexport default Workflow;"]},"metadata":{},"sourceType":"module"}